#!/usr/bin/env python
# coding: utf-8
#1 Counting DNA NucleotidesA string is simply an ordered collection of symbols selected from some alphabet and formed into a word; the length of a string is the number of symbols that it contains.

An example of a length 21 DNA string (whose alphabet contains the symbols 'A', 'C', 'G', and 'T') is "ATGCTTCAGAAAGGTCTTACG."

Given: A DNA string s of length at most 1000 nt.

Return: Four integers (separated by spaces) counting the respective number of times that the symbols 'A', 'C', 'G', and 'T' occur in s.


# In[16]:


dna = 'GCTTCCTACAAGAATATAAACACCGACTTATGTGGCGTTAGGAGGGATTCGGTTTAGGAGGGGACAGTTCGCCAGAAACCACGACATGCTTTGTGAATGATAAGGATCCTGTGCTTGTCTCGACTAGGTCAAAGCATGTTTATTGCTGGTAGGAAGATGTCCTGCCTGTTTCCTTGGTAATGCCGTTGCATAAACTCCATTACCTGAAGTCCGTCCTTGGAGTTGTTGCGCCATAGCTAGATGGAATAGCTGCTTAGAACGCAAGGCTTTACCATGCTCTTGCGCAGGTTTACAGATCGTCTCTCGCTATCCTCTACGGCGGACACTTTGTAACACAACATAGACGCGACAAGCGAAGCTATAAGCCTCTCCTTATAACTAGGCGTAAAAATGGCTCAATTTTTGGGTGAGGGAAAATTCCACGCGTAATATCCTGTGTTATACTGGATCCGGTCACTATCCGCTTTTCGTTAGCCGATGTATGACTCTACGCAGAGTCGCGGCTGCTGTTAATATAACTATCGACTCACTTAACAACCCTCGACATCATCGACCGTCGATGTGCGGATGTATTCTAAATGCCCATGGTAGTCCTATGTCGTGCCAGCGGGAAAGAAGGCTAACTGTCCACCCCGGACCAGTCTCCCGATCTTGACGAGGTCCGGCTTAGTATGCTAGAGCTCGTGTAAATGTGGGGGCTGGATTCGCCTTGTTGGGGCCTTCGGCGGGGATAGTTAAGACAGGATACCCAATAGCGAAAATCGTTTATCTTATATAGATGTAAAGGTTACTGGACTGTCGAGGCCCCCTACTACTTATATATAAATCT'
count_a = 0
count_c = 0
count_g = 0
count_t = 0

for base in dna:
    if base == 'A':
        count_a = count_a + 1
    elif base == 'C':
        count_c = count_c + 1
    elif base == 'G':
        count_g = count_g + 1
    elif base == 'T':
        count_t = count_t + 1
print(count_a, count_c, count_g, count_t)

#2 Transcribing DNA into RNA

Problem
An RNA string is a string formed from the alphabet containing 'A', 'C', 'G', and 'U'.

Given a DNA string t corresponding to a coding strand, its transcribed RNA string u is formed by replacing all occurrences of 'T' in t with 'U' in u.

Given: A DNA string t having length at most 1000 nt.

Return: The transcribed RNA string of t.
# In[18]:


dna = 'GGGATATTGGTAGTAGAACGGTATATAGGCATGACCGGCACTTTATAACGCCATAGGACCTAACTTCCTGGCACCTGAATGGATTATGCGGTGCACATGCGCTTGAGAGGTAGGAACACTTACTAAAACCTCGCCTAGTATATCCTACGCCTAGTCTGTTTCCATTCACAGCCGGTGATCATAACCGCCCACCAACGGGCAGTGCATCAACATGGAAAAGCACTACACAGAAACCTTTTCGGGCCCGGCAGCCATTGCAAGCGGTACTACGAATTTGAGCGCTCTCTCCAGGTACCTAACCGTCCGAAAAGTTAATGACGGTTTGATCATAACGATGGTGTCACGAGGATCAGCAAGCCAAACCAGAGGGAAACGTCTCGCTTACCCGAAGTACCATTCTTGGATGGGTATCAACTCGCGCATCCGCGGATCTGCGTCGGAGAGTCTCTCTCCCAACTTTCGAAGGGACATCAATCAGCCGGTACCTCATCACGGGACCTTGATTGTAGAGTGCCTTCCGTAAGCGATCATGTACACTTCCGACAAGCGGCGCAGCCAGCTTTCGGGTGGCAAGAATGGGGCCACAACCTCCGCGCATTAAACTCATAGGGTCGTAATACAATCGTACTCTATAACCGGCCGTTAAGATGTCAGTGGTATCACGGTTCGCAATGGCCCTGCGGCAAACTATGGAGCACAATACCTGCCTAGTAAATCGGTGTGCACGTAACGAAGGTAAACTGCGGCGAATTCTGCCGGTGCTCAGAGATTGAGAACTCCTTGGGCCCGCTCATCTTCATACTGGCAGCCACGACTAGATTGCTACCCATGTAATCGTCCATGGCCGGAGCGTATGTTATGAGTAGGAAACTTAACGACTCTTGTCCTCACTACGGTGCGGGTAATGCAGGCGAGATGGCCGGAGGATAGAACTCGCGGGATATCGGGGGCGCGAAAGTCGGTGCATCACTCGATCAAGCCTTGGGTTC'
dna.replace('T', 'U')

#3 Complementing a strand of DNA

Problem
In DNA strings, symbols 'A' and 'T' are complements of each other, as are 'C' and 'G'.

The reverse complement of a DNA string s is the string sc formed by reversing the symbols of s, then taking the complement of each symbol (e.g., the reverse complement of "GTCA" is "TGAC").

Given: A DNA string s of length at most 1000 bp.

Return: The reverse complement sc of s.
# In[19]:


dna = 'GAGCCGTGATTCTTAAACCGGGCCGTGTATACTTTTTTAGACCGCATCCAAACTAGTTCTGGGTACGGCTCCCAAAGTAGTGTGCGCAAATATCATGCCCTTGCAGCGAGGAAGGAATACTGCAACATTAGGTTGGAGTTAAGTACGGGACAGTGTCCAAGGTGGGACCTTCAGAACTGCGACAGTCTATTATCGCCTGGTCATTGTGTTGCCTGACGTTTGGGTGGGATGACAGGTGCACGGCTCTTCATCGCGACGTTGAGAATAATGAAGTTTCCTTGATCAATGCTCTCGTAAGCTCTCACTCGTCCCGACTCTACGCTGCCCGAGAGGTTATTCGTGTCAGAATTAACTAATTCGTAGATCCTACTCGACGACCAAGTAAGCATGGGGCGTGGAGTTTCCTTTGACACCATGACCCTCCCATACCGGATAAACCCCATGTCTCAGTTACTGAGCACGAACGACCACCTTTACAAAGTTTGTGCACTGTTACTATAGTGCAGCCCGCCTAAGTAATGTCCGAAGACCGGAGTGAGGTAGAATGTCCATATGAACCTTCACGATTTTCGCGTTGTCCTGAGAAGCTTGGTGTGCATGTTTGTTCGGAGTACGTCTGAAGGTGCGCCACCTAAGTTCTCGGTCAACGCAAGGTTCCGGAATCTCACATACCCAATCGGCACAGGTTTGGGTAGAGTGCCTCCGCATGCATGTCGTCGAAAAGAACTCCCGCGTATGGTTTGGTTGGCCGTGTGGACGGTAGGGTTTTCGGGGATTCCCCTTAGCTACTTTTGGCAACCCAATGACTCCTGGACCGGACTTCAAGGCGCGCACCGG'
list(reversed(dna))


# In[21]:


rev = ' '
for base in reversed(dna):
    rev += base
rev


# In[23]:


revcomp = ' '
for base in reversed(dna):
    if base == 'A':
        revcomp += 'T'
    elif base == 'T':
        revcomp += 'A'
    elif base == 'G':
        revcomp += 'C'
    elif base == 'C':
        revcomp += 'G'
    else:
        revcomp += base
revcomp

